BinaryTree<Integer> tree0 = new BinaryTree<Integer>(100);
BinaryTree<Integer> tree1 = new BinaryTree<Integer>(50);
BinaryTree<Integer> tree2 = new BinaryTree<Integer>(-1);
BinaryTree<Integer> tree3 = new BinaryTree<Integer>(-10);
BinaryTree<Integer> tree4 = new BinaryTree<Integer>(null);
tree3.setLeft(tree4);
BinaryTree<Integer> tree5 = new BinaryTree<Integer>(null);
tree3.setRight(tree5);
tree2.setLeft(tree3);
BinaryTree<Integer> tree6 = new BinaryTree<Integer>(49);
BinaryTree<Integer> tree7 = new BinaryTree<Integer>(null);
tree6.setLeft(tree7);
BinaryTree<Integer> tree8 = new BinaryTree<Integer>(null);
tree6.setRight(tree8);
tree2.setRight(tree6);
tree1.setLeft(tree2);
BinaryTree<Integer> tree9 = new BinaryTree<Integer>(54);
BinaryTree<Integer> tree10 = new BinaryTree<Integer>(null);
tree9.setLeft(tree10);
BinaryTree<Integer> tree11 = new BinaryTree<Integer>(null);
tree9.setRight(tree11);
tree1.setRight(tree9);
tree0.setLeft(tree1);
BinaryTree<Integer> tree12 = new BinaryTree<Integer>(150);
BinaryTree<Integer> tree13 = new BinaryTree<Integer>(null);
tree12.setLeft(tree13);
BinaryTree<Integer> tree14 = new BinaryTree<Integer>(null);
tree12.setRight(tree14);
tree0.setRight(tree12);
